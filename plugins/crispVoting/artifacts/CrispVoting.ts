export const CrispVotingAbi = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    name: "MANAGER_PERMISSION_ID",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "SET_TARGET_CONFIG_PERMISSION_ID",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "UPGRADE_PLUGIN_PERMISSION_ID",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "canExecute",
    inputs: [{ name: "_proposalId", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createE3Request",
    inputs: [
      { name: "_metadata", type: "bytes", internalType: "bytes" },
      {
        name: "_actions",
        type: "tuple[]",
        internalType: "struct Action[]",
        components: [
          { name: "to", type: "address", internalType: "address" },
          { name: "value", type: "uint256", internalType: "uint256" },
          { name: "data", type: "bytes", internalType: "bytes" },
        ],
      },
      { name: "_startDate", type: "uint64", internalType: "uint64" },
      { name: "_endDate", type: "uint64", internalType: "uint64" },
      { name: "_data", type: "bytes", internalType: "bytes" },
    ],
    outputs: [{ name: "proposalId", type: "uint256", internalType: "uint256" }],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "createProposal",
    inputs: [
      { name: "", type: "bytes", internalType: "bytes" },
      {
        name: "",
        type: "tuple[]",
        internalType: "struct Action[]",
        components: [
          { name: "to", type: "address", internalType: "address" },
          { name: "value", type: "uint256", internalType: "uint256" },
          { name: "data", type: "bytes", internalType: "bytes" },
        ],
      },
      { name: "", type: "uint64", internalType: "uint64" },
      { name: "", type: "uint64", internalType: "uint64" },
      { name: "", type: "bytes", internalType: "bytes" },
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "customProposalParamsABI",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "dao",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "contract IDAO" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "enclave",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "contract IEnclave" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "execute",
    inputs: [{ name: "_proposalId", type: "uint256", internalType: "uint256" }],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getCurrentTargetConfig",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IPlugin.TargetConfig",
        components: [
          { name: "target", type: "address", internalType: "address" },
          { name: "operation", type: "uint8", internalType: "enum IPlugin.Operation" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getProposal",
    inputs: [{ name: "_proposalId", type: "uint256", internalType: "uint256" }],
    outputs: [
      {
        name: "proposal_",
        type: "tuple",
        internalType: "struct ICrispVoting.Proposal",
        components: [
          { name: "executed", type: "bool", internalType: "bool" },
          {
            name: "parameters",
            type: "tuple",
            internalType: "struct ICrispVoting.ProposalParameters",
            components: [
              { name: "startDate", type: "uint64", internalType: "uint64" },
              { name: "endDate", type: "uint64", internalType: "uint64" },
              { name: "snapshotBlock", type: "uint256", internalType: "uint256" },
              { name: "minVotingPower", type: "uint256", internalType: "uint256" },
            ],
          },
          {
            name: "tally",
            type: "tuple",
            internalType: "struct ICrispVoting.TallyResults",
            components: [
              { name: "yes", type: "uint256", internalType: "uint256" },
              { name: "no", type: "uint256", internalType: "uint256" },
            ],
          },
          {
            name: "actions",
            type: "tuple[]",
            internalType: "struct Action[]",
            components: [
              { name: "to", type: "address", internalType: "address" },
              { name: "value", type: "uint256", internalType: "uint256" },
              { name: "data", type: "bytes", internalType: "bytes" },
            ],
          },
          { name: "allowFailureMap", type: "uint256", internalType: "uint256" },
          {
            name: "targetConfig",
            type: "tuple",
            internalType: "struct IPlugin.TargetConfig",
            components: [
              { name: "target", type: "address", internalType: "address" },
              { name: "operation", type: "uint8", internalType: "enum IPlugin.Operation" },
            ],
          },
          { name: "e3Id", type: "uint256", internalType: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getProposalByIndex",
    inputs: [{ name: "_index", type: "uint256", internalType: "uint256" }],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ICrispVoting.Proposal",
        components: [
          { name: "executed", type: "bool", internalType: "bool" },
          {
            name: "parameters",
            type: "tuple",
            internalType: "struct ICrispVoting.ProposalParameters",
            components: [
              { name: "startDate", type: "uint64", internalType: "uint64" },
              { name: "endDate", type: "uint64", internalType: "uint64" },
              { name: "snapshotBlock", type: "uint256", internalType: "uint256" },
              { name: "minVotingPower", type: "uint256", internalType: "uint256" },
            ],
          },
          {
            name: "tally",
            type: "tuple",
            internalType: "struct ICrispVoting.TallyResults",
            components: [
              { name: "yes", type: "uint256", internalType: "uint256" },
              { name: "no", type: "uint256", internalType: "uint256" },
            ],
          },
          {
            name: "actions",
            type: "tuple[]",
            internalType: "struct Action[]",
            components: [
              { name: "to", type: "address", internalType: "address" },
              { name: "value", type: "uint256", internalType: "uint256" },
              { name: "data", type: "bytes", internalType: "bytes" },
            ],
          },
          { name: "allowFailureMap", type: "uint256", internalType: "uint256" },
          {
            name: "targetConfig",
            type: "tuple",
            internalType: "struct IPlugin.TargetConfig",
            components: [
              { name: "target", type: "address", internalType: "address" },
              { name: "operation", type: "uint8", internalType: "enum IPlugin.Operation" },
            ],
          },
          { name: "e3Id", type: "uint256", internalType: "uint256" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTargetConfig",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IPlugin.TargetConfig",
        components: [
          { name: "target", type: "address", internalType: "address" },
          { name: "operation", type: "uint8", internalType: "enum IPlugin.Operation" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getVotingToken",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "contract IVotesUpgradeable" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "hasSucceeded",
    inputs: [{ name: "_proposalId", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_params",
        type: "tuple",
        internalType: "struct ICrispVoting.PluginInitParams",
        components: [
          { name: "dao", type: "address", internalType: "contract IDAO" },
          { name: "token", type: "address", internalType: "address" },
          { name: "enclave", type: "address", internalType: "address" },
          { name: "filter", type: "address", internalType: "address" },
          { name: "threshold", type: "uint32[2]", internalType: "uint32[2]" },
          { name: "crispProgramAddress", type: "address", internalType: "address" },
          { name: "crispProgramParams", type: "bytes", internalType: "bytes" },
          { name: "computeProviderParams", type: "bytes", internalType: "bytes" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "minDuration",
    inputs: [],
    outputs: [{ name: "", type: "uint64", internalType: "uint64" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "minParticipation",
    inputs: [],
    outputs: [{ name: "", type: "uint32", internalType: "uint32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "minProposerVotingPower",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "numberOfProposals",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pluginType",
    inputs: [],
    outputs: [{ name: "", type: "uint8", internalType: "enum IPlugin.PluginType" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "proposalCount",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proposalCounts",
    inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "protocolVersion",
    inputs: [],
    outputs: [{ name: "", type: "uint8[3]", internalType: "uint8[3]" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setTargetConfig",
    inputs: [
      {
        name: "_targetConfig",
        type: "tuple",
        internalType: "struct IPlugin.TargetConfig",
        components: [
          { name: "target", type: "address", internalType: "address" },
          { name: "operation", type: "uint8", internalType: "enum IPlugin.Operation" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [{ name: "_interfaceId", type: "bytes4", internalType: "bytes4" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalVotingPower",
    inputs: [{ name: "_blockNumber", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "upgradeTo",
    inputs: [{ name: "newImplementation", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      { name: "newImplementation", type: "address", internalType: "address" },
      { name: "data", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "AdminChanged",
    inputs: [
      { name: "previousAdmin", type: "address", indexed: false, internalType: "address" },
      { name: "newAdmin", type: "address", indexed: false, internalType: "address" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BeaconUpgraded",
    inputs: [{ name: "beacon", type: "address", indexed: true, internalType: "address" }],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [{ name: "version", type: "uint8", indexed: false, internalType: "uint8" }],
    anonymous: false,
  },
  {
    type: "event",
    name: "ProposalCreated",
    inputs: [
      { name: "proposalId", type: "uint256", indexed: true, internalType: "uint256" },
      { name: "creator", type: "address", indexed: true, internalType: "address" },
      { name: "startDate", type: "uint64", indexed: false, internalType: "uint64" },
      { name: "endDate", type: "uint64", indexed: false, internalType: "uint64" },
      { name: "metadata", type: "bytes", indexed: false, internalType: "bytes" },
      {
        name: "actions",
        type: "tuple[]",
        indexed: false,
        internalType: "struct Action[]",
        components: [
          { name: "to", type: "address", internalType: "address" },
          { name: "value", type: "uint256", internalType: "uint256" },
          { name: "data", type: "bytes", internalType: "bytes" },
        ],
      },
      { name: "allowFailureMap", type: "uint256", indexed: false, internalType: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ProposalExecuted",
    inputs: [{ name: "proposalId", type: "uint256", indexed: true, internalType: "uint256" }],
    anonymous: false,
  },
  {
    type: "event",
    name: "TargetSet",
    inputs: [
      {
        name: "newTargetConfig",
        type: "tuple",
        indexed: false,
        internalType: "struct IPlugin.TargetConfig",
        components: [
          { name: "target", type: "address", internalType: "address" },
          { name: "operation", type: "uint8", internalType: "enum IPlugin.Operation" },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [{ name: "implementation", type: "address", indexed: true, internalType: "address" }],
    anonymous: false,
  },
  { type: "error", name: "AlreadyInitialized", inputs: [] },
  {
    type: "error",
    name: "DaoUnauthorized",
    inputs: [
      { name: "dao", type: "address", internalType: "address" },
      { name: "where", type: "address", internalType: "address" },
      { name: "who", type: "address", internalType: "address" },
      { name: "permissionId", type: "bytes32", internalType: "bytes32" },
    ],
  },
  {
    type: "error",
    name: "DateOutOfBounds",
    inputs: [
      { name: "limit", type: "uint64", internalType: "uint64" },
      { name: "actual", type: "uint64", internalType: "uint64" },
    ],
  },
  { type: "error", name: "DelegateCallFailed", inputs: [] },
  { type: "error", name: "FunctionDeprecated", inputs: [] },
  {
    type: "error",
    name: "InvalidTargetConfig",
    inputs: [
      {
        name: "targetConfig",
        type: "tuple",
        internalType: "struct IPlugin.TargetConfig",
        components: [
          { name: "target", type: "address", internalType: "address" },
          { name: "operation", type: "uint8", internalType: "enum IPlugin.Operation" },
        ],
      },
    ],
  },
  { type: "error", name: "NoVotingPower", inputs: [] },
  {
    type: "error",
    name: "NonexistentProposal",
    inputs: [{ name: "proposalId", type: "uint256", internalType: "uint256" }],
  },
  {
    type: "error",
    name: "ProposalAlreadyExists",
    inputs: [{ name: "proposalId", type: "uint256", internalType: "uint256" }],
  },
  {
    type: "error",
    name: "ProposalCreationForbidden",
    inputs: [{ name: "_address", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "ProposalExecutionForbidden",
    inputs: [{ name: "proposalId", type: "uint256", internalType: "uint256" }],
  },
  { type: "error", name: "UseCreateE3RequestInstead", inputs: [] },
  { type: "error", name: "ZeroAddress", inputs: [] },
];
